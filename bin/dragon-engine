#!/usr/bin/python

'''-------------------------------------------------------------------------
Copyright IBM Corp. 2015, 2015 All Rights Reserved
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
Limitations under the License.
-------------------------------------------------------------------------'''

"""
Dragon Engine Server.  This does the work of actually implementing the API
calls made by the user.  Normal communications is done via the Dragon API
which then calls into this engine.
"""

import eventlet
eventlet.monkey_patch()

import os
import sys

# If ../dragon/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
POSSIBLE_TOPDIR = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(POSSIBLE_TOPDIR, 'dragon', '__init__.py')):
    sys.path.insert(0, POSSIBLE_TOPDIR)

from dragon.openstack.common import gettextutils

gettextutils.enable_lazy()
gettextutils.install('dragon', lazy=True)

from oslo.config import cfg

from dragon.common import messaging
#from dragon.common import notify

from dragon.openstack.common import log as logging
from dragon.openstack.common import service

from dragon.rpc import api as rpc_api


LOG = logging.getLogger('dragon.engine')

if __name__ == '__main__':

    cfg.CONF(project='dragon', prog='dragon-engine')
    cfg.CONF.default_log_levels = ['amqplib=WARN',
                                   'sqlalchemy=WARN',
                                   'qpid.messaging=INFO',
                                   'keystone=INFO',
                                   'eventlet.wsgi.server=WARN',
                                   ]
    logging.setup('dragon')
    messaging.setup()

    from dragon.engine import service as engine

    srv = engine.EngineService(cfg.CONF.host, rpc_api.ENGINE_TOPIC)
    launcher = service.launch(srv)
    #notify.startup_notify(cfg.CONF.onready)
    launcher.wait()
