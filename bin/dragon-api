#!/usr/bin/python

'''-------------------------------------------------------------------------
Copyright IBM Corp. 2015, 2015 All Rights Reserved
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
Limitations under the License.
-------------------------------------------------------------------------'''

"""
Dragon API Server. An OpenStack ReST API to Dragon.
"""

import eventlet
eventlet.monkey_patch(os=False)

import os
import sys

# If ../dragon/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'dragon', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from dragon.openstack.common import gettextutils

gettextutils.enable_lazy()
gettextutils.install('dragon', lazy=True)

from oslo.config import cfg

from dragon.common import config
from dragon.common import messaging
from dragon.common import wsgi
#from dragon.common import notify

from dragon.openstack.common import log as logging

LOG = logging.getLogger('dragon.api')

if __name__ == '__main__':
    try:
        cfg.CONF(project='dragon', prog='dragon-api')
        cfg.CONF.default_log_levels = ['amqplib=WARN',
                                       'qpid.messaging=INFO',
                                       'keystone=INFO',
                                       'eventlet.wsgi.server=WARN',
                                       ]
        logging.setup('dragon')
        messaging.setup()

        app = config.load_paste_app()

        port = cfg.CONF.dragon_api.bind_port
        host = cfg.CONF.dragon_api.bind_host
        LOG.info('Starting Dragon ReST API on %s:%s' % (host, port))
        server = wsgi.Server()
        server.start(app, cfg.CONF.dragon_api, default_port=port)
        # notify.startup_notify(cfg.CONF.onready)
        server.wait()
    except RuntimeError as e:
        sys.exit("ERROR: %s" % e)
