
# dragon-api pipeline
[pipeline:dragon-api]
pipeline = faultwrap versionnegotiation authtoken context apiv1app

# dragon-api pipeline for standalone heat
# ie. uses alternative auth backend that authenticates users against keystone
# using username and password instead of validating token (which requires
# an admin/service token).
# To enable, in dragon.conf:
#   [paste_deploy]
#   flavor = standalone
#
[pipeline:dragon-api-standalone]
pipeline = faultwrap versionnegotiation authpassword context apiv1app

# dragon-api pipeline for custom cloud backends
# i.e. in dragon.conf:
#   [paste_deploy]
#   flavor = custombackend
#
[pipeline:dragon-api-custombackend]
pipeline = faultwrap versionnegotiation context custombackendauth apiv1app

[app:apiv1app]
paste.app_factory = dragon.common.wsgi:app_factory
dragon.app_factory = dragon.api.openstack.v1:API

[app:apicfnv1app]
paste.app_factory = dragon.common.wsgi:app_factory
dragon.app_factory = dragon.api.cfn.v1:API

[app:apicwapp]
paste.app_factory = dragon.common.wsgi:app_factory
dragon.app_factory = dragon.api.cloudwatch:API

[filter:versionnegotiation]
paste.filter_factory = dragon.common.wsgi:filter_factory
dragon.filter_factory = dragon.api.openstack:version_negotiation_filter

[filter:faultwrap]
paste.filter_factory = dragon.common.wsgi:filter_factory
dragon.filter_factory = dragon.api.openstack:faultwrap_filter

[filter:cfnversionnegotiation]
paste.filter_factory = dragon.common.wsgi:filter_factory
dragon.filter_factory = dragon.api.cfn:version_negotiation_filter

[filter:cwversionnegotiation]
paste.filter_factory = dragon.common.wsgi:filter_factory
dragon.filter_factory = dragon.api.cloudwatch:version_negotiation_filter

[filter:context]
paste.filter_factory = dragon.common.context:ContextMiddleware_filter_factory

[filter:ec2authtoken]
paste.filter_factory = dragon.api.aws.ec2token:EC2Token_filter_factory

# Auth middleware that validates token against keystone
[filter:authtoken]
paste.filter_factory = dragon.common.auth_token:filter_factory

# Auth middleware that validates username/password against keystone
[filter:authpassword]
paste.filter_factory = dragon.common.auth_password:filter_factory

# Auth middleware that validates against custom backend
[filter:custombackendauth]
paste.filter_factory = dragon.common.custom_backend_auth:filter_factory
